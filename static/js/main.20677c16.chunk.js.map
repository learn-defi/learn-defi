{"version":3,"sources":["Images/getLDFButton.png","App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","connected","loadWeb3","loadBlockchainData","useState","setConnect","setConnectStatus","account","setAccount","setEthBalance","ldfTokens","setldfTokens","deployedldf","setdeployedldf","setldfBalances","ldfAddress","setldfAddress","setremainingLDFs","learnDeFis","setlearnDeFis","deployedLearnDeFi","setdeployedLearnDeFi","learnDeFiAddress","setlearnDeFiAddress","gotRemainingBalances","setgotRemainingBalances","setbalanceOfStakes","setLDFReleaseTimes","a","window","ethereum","web3js","Web3","enable","web3","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkID","getBalance","then","balance","utils","fromWei","learnDeFiData","LearnDeFi","networks","learnDeFi","Contract","abi","address","LearnDeFiAddress","_address","methods","stakeOf","call","balanceOfStake","releaseTime","LDFreleaseTime","console","log","Intl","DateTimeFormat","format","ldfTokenData","LDFToken","ldfToken","balanceOf","ldfBalance","LDFaddress","setTimeout","loadRemainingLDF","remainingBalance","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20677c16.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/getLDFButton.171daeb2.png\";","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport {Route,HashRouter   , Switch, Link} from 'react-router-dom'\n\n\n\n\n//  HashRouter\nimport Home from './Pages/Home'\nimport BuyLDF from './Pages/BuyLDF'\nimport Tokenomic from './Pages/Tokenomic'\nimport Tutorial from './Pages/Tutorial'\nimport ContactUs from './Pages/ContactUs'\nimport Wallet from './Pages/Wallet'\nimport Development from './Pages/Development'\n\n\n// React-countdown\nimport Countdown from 'react-countdown'\nimport Footer from './component/Footer'\n\n\n// for const learnDeFi = new web3.eth.Contract()\nimport LearnDeFi from './abi/LearnDeFi.json'\nimport LDFToken from './abi/LDFToken.json'\n\nfunction App() {\n\n  useEffect(()=> {\n    if (!connected)\n    {\n      loadWeb3(); \n      loadBlockchainData();\n    }\n\n    else\n    {\n        loadBlockchainData();\n\n      \n    }\n   \n    \n})\n\nlet [connected, setConnect] = useState(false);\nlet [connectState,setConnectStatus] = useState(\"Connect Wallet\");\nlet [account,setAccount] = useState(\"\");\nlet [EthBalance,setEthBalance] = useState(\"\");\n\n\n\n// Contract \n\n// LDFToken\nconst [ldfTokens,setldfTokens] = useState();\nlet [deployedldf,setdeployedldf] = useState(false)\nlet [ldfBalances,setldfBalances] = useState();\nlet [ldfAddress,setldfAddress] = useState();\nlet [remainingLDFs,setremainingLDFs] = useState();\n\n\n// LearnDeFi\nconst [learnDeFis,setlearnDeFis] = useState();\nlet [deployedLearnDeFi,setdeployedLearnDeFi] = useState(false)\nlet [learnDeFiAddress,setlearnDeFiAddress] = useState();\n\n// balances\nlet [gotRemainingBalances,setgotRemainingBalances] = useState(false)\n\n// ldf balances\nlet [balanceOfStakes,setbalanceOfStakes] = useState();\n\n\n// withdrawl function\nlet [withdrawlEthFunction,setwithdrawlEthFunction] = useState();\nlet [demicals,setdemicals] = useState(1000000000000000000);\nlet [withdrawlLDFamount,setwithdrawlLDFamount] = useState(10);\nlet [withdrawlETHamount,setwithdrawlETHamount] = useState(0.01);\n\nlet [LDFReleaseTimes,setLDFReleaseTimes] = useState(0);\n\n\nconst loadWeb3 = async ()=> {\n\n\n    \n  if (window.ethereum) {\n    window.web3js = new Web3(window.ethereum)\n    await window.ethereum.enable()\n    setConnect(connected = true);\n    setConnectStatus(connectState = \"Connected\")\n\n   \n  }\n    \n    else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider)\n    setConnect(connected = true);\n    setConnectStatus(connectState = \"Connected\")\n    \n    \n    \n    \n    \n    }\n    else {\n    window.alert(\"Connect your wallet\")\n    setConnectStatus(connectState = \"Connect Wallet\")\n   \n\n    }\n\n    \n\n\n    \n    \n }\n\n\n let loadBlockchainData = async() => {\n   \n  const web3 = window.web3js;\n\n  const accounts = await web3.eth.getAccounts()\n  setAccount(account = accounts[0])\n\n  const networkID = await web3.eth.net.getId()\n\n  web3.eth.getBalance(account).then(function(balance) {\n   setEthBalance(web3.utils.fromWei(balance,'ether'))\n   })\n\n\n\n     // Load LearnDeFi\n     const learnDeFiData = LearnDeFi.networks[networkID]\n\n     if (learnDeFiData)\n     {\n       if (! deployedLearnDeFi)\n       {\n         const learnDeFi =  new web3.eth.Contract(LearnDeFi.abi,learnDeFiData.address)\n         await setlearnDeFis(learnDeFi)\n\n          let LearnDeFiAddress = learnDeFi._address\n          await setlearnDeFiAddress(LearnDeFiAddress)\n\n          let balanceOfStake = web3.utils.fromWei(await learnDeFi.methods.stakeOf(account).call(),'ether')\n          await setbalanceOfStakes(balanceOfStake)\n\n          let LDFreleaseTime = await learnDeFi.methods.releaseTime(account).call()\n          console.log(\"release Time\" , LDFreleaseTime)\n         \n          setLDFReleaseTimes(new Intl.DateTimeFormat('en-US').format(LDFreleaseTime ))\n         \n        \n\n         //  Withdrawl ETH function\n         //  let withdrawlETH = await learnDeFi.methods.withDrawlETH()\n         //   setwithdrawlEthFunction(withdrawlETH);\n  \n            \n          console.log(\"LearnDeFi: \") ;\n          console.log(learnDeFiAddress)\n         console.log(\n           // \"Learn DeFi Contract: \" \n          learnDeFis)\n          await setdeployedLearnDeFi(true)\n          \n\n          \n       }\n     }\n\n     // Load LearnDeFi\n\n\n   // Load LDFToken\n   const ldfTokenData = LDFToken.networks[networkID]\n\n   if (ldfTokenData)\n   {\n     if (! deployedldf)\n     {\n       const ldfToken =   new web3.eth.Contract(LDFToken.abi,ldfTokenData.address)\n        setldfTokens(ldfToken)\n\n        // *** await is a must for methods,otherwise it would fetch the data when it is not fully initizlize,which makes it undefined\n      let ldfBalance = web3.utils.fromWei(await ldfToken.methods.balanceOf(account).call(),'ether')\n     \n      let LDFaddress = await ldfToken._address;\n      await setldfAddress(LDFaddress)\n      \n\n  \n\n      console.log(\"LDFToken: \") ;\n      console.log(LDFaddress)\n      \n      console.log(\n       //  \"LDFToken Contract: \" \n         ldfTokens)\n         await setdeployedldf(true)\n        \n        \n         await setldfBalances(ldfBalance)\n         \n     }\n   }\n\n\n   // Load LDFToken\n\n\n   // Load RemainingLDFBalnce in contract\n\n\n   if (!gotRemainingBalances)\n   {\n     setTimeout(loadRemainingLDF,0)\n     setgotRemainingBalances(true);\n   }\n\n\n}\n\n\n\n\nconst sendETH = async()=> {\n  const web3 = window.web3js;\n //  console.log(learnDeFiAddress)\n  web3.eth.sendTransaction(\n    {\n      from: account,\n      to: learnDeFis._address,\n     //  send 0.01 eth now avoid test in mainnet\n      value: 0.01 * demicals,\n\n    }\n    ,function (err,transactionHash)\n\n    {\n      if (err)\n      {\n        console.log(err);\n      }\n      else {\n        console.log(transactionHash + \" sent \")\n       //  Can execute a function after send success , execute transfer LDF function \n\n      }\n    }\n\n\n  )\n}\n\n\n//  Developer function,use at your own risk ! \n\n\n\nconst withdrawlLDF = async()=> {\n\n const web3 = window.web3js;\n learnDeFis.methods.withDrawlLDF((withdrawlLDFamount*demicals).toString()).send({from: account});\n console.log(\"Withdrawl \" + withdrawlLDFamount + \" LDF\")\n\n}\n\n\n\n\nconst withdrawlETH = async()=> {\n\n const web3 = window.web3js;\n learnDeFis.methods.withDrawlETH((withdrawlETHamount* demicals).toString()).send({from:account})\n console.log(\"Withdrawl ETH\")\n console.log(\"Withdrawl \" + withdrawlETHamount + \" ETH\")\n\n}\n\nconst approve= async()=> {\nconst web3= window.web3js;\nldfTokens.methods.approve(learnDeFiAddress,(1* demicals).toString()).send({\n  from: account\n})\n}\n\n\n\n // CheckBalanceOf\n const checkBalanceOf = async()=> {\n   const web3 = window.web3js;\n   learnDeFis.methods.checkBalanceOf(0.01)\n }\n\n // CheckAllowance\n const checkAllowance = async()=> {\n   const web3 = window.web3js;\n   learnDeFis.methods.checkAllowance((0.01* demicals).toString()).call({\n     from: account\n   })\n }\n\n\nconst addStake = async()=> {\n const web3 = window.webjs;\n learnDeFis.methods.addStaker(account,(0.01* demicals).toString()).send(\n   {\n     from: account\n   },\n   function(err,transactionHash)\n   {\n     if (err)\n     {\n       console.log(err);\n     }\n     else {\n       console.log(transactionHash + \"sent\")\n     }\n   }\n )\n console.log('add stake')\n}\n\n\n\nconst removeStake = async()=> {\n const web3 = window.web3js;\n learnDeFis.methods.removeStaker(account,(0.01 * demicals).toString()).send(\n {\n   from: account\n }\n )\n}\n\n\n\n\nconst balanceOfStaker = async()=> {\n const web3 = window.webjs;\n learnDeFis.\n methods.stakeOf(account).send({\n   from: account\n },\n function(err,transactionHash)\n {\n   if (err)\n   {\n     console.log(err);\n   }\n\n   else {\n     console.log(transactionHash + \"sent\")\n\n   }\n })\n}\n\n\n\n\n\n//  Developer function,use at your own risk ! \n\n\n\n\n\n\nconst loadRemainingLDF = async() => {\n console.log(\"HERE\")\n \n\n const web3 =  window.web3js;\n const networkID =  web3.eth.net.getId()\n const ldfTokenData =  LDFToken.networks[networkID]\n let remainingBalance;\nif (ldfTokens)\n {\n   setTimeout(remainingBalance = await ldfTokens.methods.balanceOf(learnDeFiAddress).call(),5000)\n   await setremainingLDFs(web3.utils.fromWei(remainingBalance),'ether')\n   await setgotRemainingBalances(true);\n   console.log('finished')\n  \n }\n \n \n  \n  \n}\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n    {ldfAddress}\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}